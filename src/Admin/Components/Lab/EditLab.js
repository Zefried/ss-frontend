import React, { useState, useEffect} from 'react';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import { customStateMethods } from '../../../StateMng/Slice/AuthSlice';

export const EditLab = () => {

     // Additional states starts from here
     const navigate = useNavigate();
     let token = customStateMethods.selectStateKey('appState', 'token');
     const [loading, setLoading] = useState(null);
     const [messages, setMessages] = useState(null);
     const { id } = useParams(); // Extract the doctor ID from URL parameters
     const [validationGlobalErrorMsg, setValidationGlobalErrorMsg] = useState('');
     // Ends here





    // Component state starts from here

            ////// Handling Server response for messages and errors
            const [serverResponse, setServerResponse] = useState({
                validation_error:{},
                message:{},
                error:{},
            });

            /////// Form state to hold all input data starts here
            const [existingData, setExistingData] = useState({
                name: '',
                age: '',
                sex: '',
                relativeName: '',  // Father, Mother, or Spouse
                phone: '',
                email: '',
                registrationNo: '',
                village: '',
                po: '',
                ps: '',
                pin: '',
                district: '',
                buildingNo: '',
                landmark: '',
                workDistrict: '',
                state: '',
                designation: '',
                password: '',
                pswCred: '',
                profession: '',
                unique_user_id: '', // generated by backend
            });
            /////// Form state ends here


    // Component state ends here






    // UseEffect starts from here

            /////// Fetching existing data starts here
            useEffect(() => {
                try {
                    setLoading(customStateMethods.spinnerDiv(true)); // Show loading spinner

                    // Send CSRF token request
                    axios.get('sanctum/csrf-cookie').then(response => {
                        // Fetch doctor details API call
                        axios.get(`api/admin/lab/fetch-lab-single-account-data/${id}`, {
                            headers: {
                                'Content-Type': 'application/json',
                                Authorization: `Bearer ${token}`
                            }
                        })
                        .then((res) => {
                            if (res.data.status === 200) {
                                setExistingData(res.data.listData[0]); // Set form data with fetched doctor details
                                setMessages(customStateMethods.getAlertDiv(res.data.message)); // Show success message
                            } else {
                                setMessages(customStateMethods.getAlertDiv(res.data.message)); // Show error message
                                setLoading(false); // Hide loading spinner
                            }
                            setLoading(false); // Hide loading spinner
                        });
                    });
                } catch (error) {
                    setLoading(false); // Hide loading spinner on unexpected error
                    console.log(error); // Log unexpected error
                }

                // Clear validation error message after 3 seconds
                setTimeout(() => {
                    setValidationGlobalErrorMsg(''); // Clear the validation error message
                }, 3000);
            }, []); 
            /////// Fetch existing data ends here


    // Ends here






    // Custom hooks starts from here

        //////// Clearing all alert messages with custom hook
        customStateMethods.useClearAlert(setMessages);
        //////// Ends here


    // Custom hooks ends here

 


  

    // Step management starts here
    const [step, setStep] = useState(1); 
        /////// Proceed to next step
        const nextStep = () => setStep(step + 1);
        
        /////// Go back to previous step
        const prevStep = () => setStep(step - 1);
    // Step management ends here
 



    

    // Component Functions starts here

            //////// Function to handle updating doctor details
            function updateExistingData(e) {
                e.preventDefault(); // Prevent default form submission

                setLoading(customStateMethods.spinnerDiv(true)); // Show loading spinner

                try {
                    // Send CSRF token request
                    axios.get('sanctum/csrf-cookie').then(response => {
                        // Update doctor details API call
                        axios.post(`api/admin/lab/update-lab-data/${id}`, existingData, {
                            headers: {
                                'Content-Type': 'application/json',
                                Authorization: `Bearer ${token}`
                            }
                        })
                        .then((res) => {
                            // Update server response state
                            setServerResponse((prevData) => ({
                                ...prevData,
                                validation_error: res.data.validation_error,
                                message: res.data.message,
                                error: res.data.error
                            }));

                            // Handle success and error messages
                            if (res.data.status !== 200) {
                                setMessages(customStateMethods.getAlertDiv(res.data.message));
                            } else {
                                setMessages(customStateMethods.getAlertDiv(res.data.message));
                                navigate('/admin/view-lab')
                            }

                            // Hide loading spinner if response received
                            if (res.data) {
                                setLoading(false);
                            }
                        })
                        .catch(error => {
                            setLoading(false); // Hide loading spinner on error
                            console.log(error); // Handle API error
                        });
                    });
                } catch (error) {
                    setLoading(false); // Hide loading spinner on unexpected error
                    console.log(error); // Log unexpected error
                }
            }
            //////// Function to update doctor details ends here



            //////// Handle input changes for form fields
            const handleChange = (e) => {
                setExistingData({
                    ...existingData,
                    [e.target.name]: e.target.value // Update state with input value
                });
            };
            //////// Handle input changes ends here

    // Component Functions ends here





    // Component JSX schema starts here

            //////// edit main form starts here
            let editMainForm = (
                <div className="container mt-5">
                    <div className="card shadow-lg border-0 rounded-4" id='doc-bg'>
                        <div className="card-body p-4">
                        <h3 className="text-center mb-4">Lab Registration {step}</h3>
                        {messages}
                        {loading}
                    
                        
                            <form >
                            <div className="row">

                            {/* Step 1: Lab Information */}
                            {step === 1 && (
                            <>
                            <h5 className="text-center mb-4">Lab Information</h5>

                            <div className="form-floating mb-3 col-lg-6">
                                <select disabled className="form-control" id="profession" name="profession" value={existingData.profession} onChange={handleChange} >
                                    <option value="">Select Profession ? </option>
                                    <option value="lab">Lab</option>
                                    <option value="hospital">Hospital</option>
                                </select>
                                <label htmlFor="profession" className="mx-1">Profession</label>
                                <span style={{ color: 'orange' }}>
                                    {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.profession : ''}
                                </span>
                            </div>                        


                            <div className="form-floating mb-3 col-lg-6">
                            <input type="text" className="form-control" id="name" name="name" value={existingData.name} onChange={handleChange} placeholder="Full Name" />
                            <label htmlFor="name" className='mx-1'>Name of Lab</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.name : ''}
                            </span>
                            </div>


                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="phone"
                            name="phone"
                            value={existingData.phone}
                            onChange={handleChange}
                            placeholder="Phone Number"
                            />
                            <label htmlFor="phone" className='mx-1'>Phone Number</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.phone : ''}
                            </span>
                            </div>

                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            disabled
                            type="email"
                            className="form-control"
                            id="email"
                            name="email"
                            value={existingData.email}
                            onChange={handleChange}
                            placeholder="Email"
                            />
                            <label htmlFor="email" className='mx-1'>Email Address</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.email : ''}
                            </span>
                            </div>

                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="registrationNo"
                            name="registrationNo"
                            value={existingData.registrationNo}
                            onChange={handleChange}
                            placeholder="Registration Number"
                            />
                            <label htmlFor="registrationNo" className='mx-1'>Registration Number</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.registrationNo : ''}
                            </span>
                            </div>

                            </>
                            )}

                            {/* Step 3: Working Address Information */}
                            {step === 2 && (
                            <>
                            <h5 className="text-center mb-4">Working Address</h5>
                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="buildingNo"
                            name="buildingNo"
                            value={existingData.buildingNo}
                            onChange={handleChange}
                            placeholder="Building Number"
                            />
                            <label htmlFor="buildingNo" className='mx-1'>Building Number, Block, and Road Address</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.buildingNo : ''}
                            </span>
                            </div>
                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="landmark"
                            name="landmark"
                            value={existingData.landmark}
                            onChange={handleChange}
                            placeholder="Landmark"
                            />
                            <label htmlFor="landmark" className='mx-1'>Landmark</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.landmark : ''}
                            </span>
                            </div>
                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="district"
                            name="district"
                            value={existingData.district}
                            onChange={handleChange}
                            placeholder="District"
                            />
                            <label htmlFor="district" className='mx-1'>District</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.workDistrict : ''}
                            </span>
                            </div>
                            <div className="form-floating mb-3 col-lg-6">
                            <input
                            type="text"
                            className="form-control"
                            id="state"
                            name="state"
                            value={existingData.state}
                            onChange={handleChange}
                            placeholder="State"
                            />
                            <label htmlFor="state" className='mx-1'>State</label>
                            <span style={{ color: 'orange' }}>
                            {serverResponse && serverResponse.validation_error ? serverResponse.validation_error.state : ''}
                            </span>
                            </div>
                            </>
                            )}


                            <div className="d-flex justify-content-center">
                            {step > 1 && ( <><button type="button" onClick={updateExistingData} className="btn btn-outline-primary col-md-3">Submit</button></>)}
                            </div>

                            </div>
                            </form>
                    
                        
                        {/* Navigation Buttons */}
                        <div className="d-flex justify-content-between mt-4">
                            {step > 1 && <button className="btn btn-secondary" onClick={prevStep}>Previous</button>}
                            {step < 2 && <button className="btn btn-primary" onClick={nextStep}>Next</button>}
                        </div>
                        </div>
                    </div>
                </div>
            )   
            //////// Ends here






                //////// Global Validation error messages starts here
                {validationGlobalErrorMsg && <div className="alert alert-danger" role="alert">{validationGlobalErrorMsg}</div>}

               
                //////// Ends here


// Component JSX schema ends here







return (
    <div>
        {validationGlobalErrorMsg}

        {/* edit main form starts here */}
            {editMainForm}
        {/* edit main form ends here */}
        
    </div>
  )

};
